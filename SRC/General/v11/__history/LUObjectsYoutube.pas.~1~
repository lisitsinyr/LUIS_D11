(*
 =======================================================
 Copyright (c) 2023
 Author:
     Lisitsin Y.R.
 Project:
     LU_PAS
     Delphi VCL Extensions (LU)
 Module:
     LUObjectsYouTube

 =======================================================
*)

unit LUObjectsYouTube;

interface

uses
    {}
        Classes, SysUtils, Forms,
    {}
    RxCtrls,
    {}
    LUObjects, LUStrUtils,
    LUThread,
    //LUThreadProgress,
    LUThreadYoutube;

{ =========================================================================== }

const
    cYUOTUBE = 'WWW.YOUTUBE.COM';
    cYUOTUBEplaylists = 'PLAYLISTS';
    cYUOTUBEplaylist = 'PLAYLIST';

{ TYouTubeObjects }

type
    TYouTubeObjects = class(TObjects)
    private
        FURL: PChar;
        FID: TDateTime;
        FProgressMax: Integer;
        FRxProgress: TRxProgress;
        FStopYouTubeBoolean: Boolean;

        //FYoutubeThread: TYoutubeThread;
        FYoutubeThread: TYoutubeThreadNew;

        // FYT: TazYouTubeApi;
        // FInfo: TazInfo;
        function GetURL: string;
        procedure SetURL (const Value: string);

    public
        constructor Create (AOwner: TComponent); override;
        destructor Destroy; override;
        procedure Clear;
        { }
        procedure StartYouTube;
        procedure StopYouTube;
        { }
        procedure UpdateProgressBarThread (aProgress: Integer);
        procedure StartYouTubeThread (aTerminateProc: TTerminateProc);
        procedure StopYouTubeThread;
        { }
        property URL: string read GetURL write SetURL;
        property ID: TDateTime read FID write FID;
        property StopYouTubeBoolean: Boolean read FStopYouTubeBoolean
            write FStopYouTubeBoolean;
        property ProgressMax: Integer read FProgressMax write FProgressMax;
        property RxProgress: TRxProgress read FRxProgress write FRxProgress;

        //property YoutubeThread: TYoutubeThread read FYoutubeThread
        //    write FYoutubeThread;
        property YoutubeThread: TYoutubeThreadNew read FYoutubeThread
            write FYoutubeThread;

        // property Info: TazInfo read FInfo write FInfo;
    end;

{ TYouTubeObjectsItem }

type
    TYouTubeObjectsItem = class(TCollectionItem)
    private
        FYouTubeObject: TYouTubeObjects;

    protected
    public
        constructor Create (AOwner: TCollection); override;
        destructor Destroy; override;
        property YouTubeObject: TYouTubeObjects read FYouTubeObject;
    end;

{ TYouTubeObjectsCollection }

type
    TYouTubeObjectsCollection = class(TCollection)
    private
        function GetItem (Index: Integer): TYouTubeObjectsItem;
        procedure SetItem (Index: Integer; Value: TYouTubeObjectsItem);
        function GeTYouTubeObjectsItem (Value: string): TYouTubeObjectsItem;

    public
        constructor Create;
        function AddObjectsItem: TYouTubeObjectsItem;
        procedure DeleteObjectsItem (Value: string);
        function FindYouTubeObjectsItemURL (AURL: string): TYouTubeObjectsItem;
        { }
        property Items[index: Integer]: TYouTubeObjectsItem read GetItem
            write SetItem; default;
        property YouTubeObjectsItem[Value: string]: TYouTubeObjectsItem
            read GeTYouTubeObjectsItem;
    end;

implementation

{ -------------- }
{ TYouTubeObjects }
{ -------------- }

constructor TYouTubeObjects.Create (AOwner: TComponent);
begin
    inherited Create (AOwner);
    ObjectType := oTYouTubeObjects;
    Clear;
    // FYT := TazYouTubeApi.Create(Self);
end;

destructor TYouTubeObjects.Destroy;
begin
    // FYT.Free;
    StrDispose (FURL);
    inherited Destroy;
end;

procedure TYouTubeObjects.Clear;
begin
    URL := '';
    ID := 0;
    StopYouTubeBoolean := False;
    ProgressMax := 0;
    RxProgress := nil;
    YoutubeThread := nil;
end;

function TYouTubeObjects.GetURL: string;
begin
    Result := StrPas (FURL);
end;

procedure TYouTubeObjects.SetURL (const Value: string);
begin
    if FURL <> nil then
        StrDispose (FURL);
    FURL := StrAlloc (Length(Value) + 1);
    StrPCopy (FURL, Value);
    // if URL <> '' then
    // FInfo := FYT.Get(URL);
end;

{ TYouTubeObjects.StartYouTube }

procedure TYouTubeObjects.StartYouTube;
var
    i: Integer;
begin
    FStopYouTubeBoolean := False;
    { LRxProgress }
    FRxProgress.Min := 0;
    FRxProgress.Max := ProgressMax;
    FRxProgress.Position := 0;
    for i := 0 to FRxProgress.Max do
    begin
        if FStopYouTubeBoolean then
        begin
            Break;
        end;
        FRxProgress.Position := i;
        FRxProgress.Update; // Make sure to repaint the progressbar
        Sleep (cSleep);
        Application.ProcessMessages;
    end;
    FRxProgress.Position := 0;
    // SendMessage(progressbar1.Handle,PBM_SETMARQUEE,1,FDelay)
end;

{ TYouTubeObjects.StopYouTube }

procedure TYouTubeObjects.StopYouTube;
begin
    FStopYouTubeBoolean := True;
    FRxProgress.Position := 0;
end;

procedure TYouTubeObjects.UpdateProgressBarThread (aProgress: Integer);
begin
    FRxProgress.Position := aProgress;
    FRxProgress.Update; // Make sure to repaint the progressbar
    if aProgress >= cProgressBarMax then
    begin
        // FYoutubeThread.FStopYouTubeBooleanThread := True;
        FRxProgress.Position := 0;
        FYoutubeThread := nil;
        // FYoutubeThread.Free;
    end;
end;

{ TYouTubeObjects.StartYouTubeThread }

procedure TYouTubeObjects.StartYouTubeThread (aTerminateProc: TTerminateProc);
begin
    if not Assigned (FYoutubeThread) then
    begin
        // FYoutubeThread := TYoutubeThread.Create (UpdateProgressBarThread, False);
        // CreateSuspended:= true

        //FYoutubeThread := TYoutubeThread.Create (UpdateProgressBarThread, True);
        FYoutubeThread := TYoutubeThreadNew.Create (UpdateProgressBarThread, True);

        
        FYoutubeThread.Priority := tpNormal;
        // Free FThread in the OnTerminate proc. This will set Terminated to true.
        // FYoutubeThread.FreeOnTerminate := False;
        FYoutubeThread.FreeOnTerminate := True;
        FYoutubeThread.TerminateProc := aTerminateProc;
        (*
        Происходит после возврата метода Execute
        потока и перед уничтожением потока.
        *)
        FYoutubeThread.OnTerminate := aTerminateProc;
        FYoutubeThread.FObjectIDStr := GenerateObjectIDStr (ID);
        FYoutubeThread.FStopYouTubeBooleanThread := False;
        FYoutubeThread.Start ();
    end;
end;

{ TYouTubeObjects.StopYouTubeThread }

procedure TYouTubeObjects.StopYouTubeThread;
begin
    FYoutubeThread.FStopYouTubeBooleanThread := True;
    FRxProgress.Position := 0;
    FYoutubeThread := nil;
end;

{ ------------------- }
{ TYouTubeObjectsItem }
{ ------------------- }

{ TYouTubeObjectsItem.Create }

constructor TYouTubeObjectsItem.Create (AOwner: TCollection);
begin
    inherited Create (AOwner);
    FYouTubeObject := TYouTubeObjects.Create (nil);
end;

{ TYouTubeObjectsItem.Destroy }

destructor TYouTubeObjectsItem.Destroy;
begin
    FYouTubeObject.Free;
    inherited Destroy;
end;

{ ------------------------- }
{ TYouTubeObjectsCollection }
{ ------------------------- }

{ TYouTubeObjectsCollection.Create }

constructor TYouTubeObjectsCollection.Create;
begin
    inherited Create (TYouTubeObjectsItem);
end;

{ TYouTubeObjectsCollection.AddObjectsItem }

function TYouTubeObjectsCollection.AddObjectsItem: TYouTubeObjectsItem;
begin
    Result := TYouTubeObjectsItem (inherited Add);
end;

{ TYouTubeObjectsCollection.GetItem }

function TYouTubeObjectsCollection.GetItem (Index: Integer)
    : TYouTubeObjectsItem;
begin
    Result := TYouTubeObjectsItem (inherited Items[index]);
end;

{ TYouTubeObjectsCollection.SetItem }

procedure TYouTubeObjectsCollection.SetItem (Index: Integer;
    Value: TYouTubeObjectsItem);
begin
    Items[index].Assign (Value);
end;

{ TYouTubeObjectsCollection.GeTYouTubeObjectsItem }

function TYouTubeObjectsCollection.GeTYouTubeObjectsItem (Value: string)
    : TYouTubeObjectsItem;
var
    i: Integer;
    LID: TDateTime;
    LObjectIDStr: string;
begin
    { Поиск Objects по Value }
    Result := nil;
    for i := 0 to Count - 1 do
    begin
        LID := Items[i].YouTubeObject.ID;
        LObjectIDStr := GenerateObjectIDStr (LID);
        if LObjectIDStr = Value then
        begin
            Result := Items[i];
            Break;
        end;
    end;
end;

{ TYouTubeObjectsCollection.DeleteObjectsItem }

procedure TYouTubeObjectsCollection.DeleteObjectsItem (Value: string);
var
    LYouTubeObjectsItem: TYouTubeObjectsItem;
begin
    LYouTubeObjectsItem := YouTubeObjectsItem[Value];
    LYouTubeObjectsItem.Free;
end;

{ TYouTubeObjectsCollection.FindYouTubeObjectsItemURL }

function TYouTubeObjectsCollection.FindYouTubeObjectsItemURL (AURL: string)
    : TYouTubeObjectsItem;
var
    i: Integer;
    LURL: string;
begin
    { Поиск Objects по AURL }
    Result := nil;
    for i := 0 to Count - 1 do
    begin
        LURL := Items[i].YouTubeObject.FURL;
        if LURL = AURL then
        begin
            Result := Items[i];
            Break;
        end;
    end;
end;

end.